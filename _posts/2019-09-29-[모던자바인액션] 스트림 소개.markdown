---
layout: splash
title:  "[모던자바인액션] 스트림 소개"
date:   2019-09-29 23:27:00 +0900
categories: 자바
---

## 스트림이란 무엇인가?
**스트림**은 자바 8 API에 추가된 기능으로, 선언형으로 컬렉션 데이터를 처리할 수 있도록 해준다. 스트림은 별도의 멀티스레드 코드 작성 없이, 병렬로 *투명하게(transparently)* 데이터 처리할 수 있다. 

> **What is declarative programming?**
> Declarative programming is when you write your code in such a way that it describes what you want to do, and not how you want to do it. It is left up to the compiler to figure out the how.
> Examples of declarative programming languages are SQL and Prolog.

```java
import java.util.*;

import static java.util.Comparator.comparing;
import static java.util.stream.Collectors.toList;


public class StreamPractice {

    private List<Dish> menu = Arrays.asList(
            new Dish("pork", false, 800, Dish.Type.MEAT),
            new Dish("beef", false, 700, Dish.Type.MEAT),
            new Dish("chicken", false, 400, Dish.Type.MEAT),
            new Dish("french fries", true, 530, Dish.Type.OTHER),
            new Dish("rice", true, 350, Dish.Type.OTHER),
            new Dish("season fruit", true, 120, Dish.Type.OTHER),
            new Dish("pizza", true, 550, Dish.Type.OTHER),
            new Dish("prawns", false, 300, Dish.Type.FISH),
            new Dish("salmon", false, 450, Dish.Type.FISH)
    );

    // Before (Java 7)
    public List<String> getLowCaloricDishesNameOld() {
        // Filters the elements using an accumulator
        List<Dish> lowCaloricDishes = new ArrayList<>();
        for(Dish dish: menu) {
            if(dish.getCalories() < 400) {
                lowCaloricDishes.add(dish);
            }
        }

        // Sorts the dishes with an anonymous class
        Collections.sort(lowCaloricDishes, new Comparator<Dish>() { 
            @Override
            public int compare(Dish o1, Dish o2) {
                return Integer.compare(o1.getCalories(), o2.getCalories());
            }
        });

        // Processes the sorted list to select the names of dishes
        List<String> lowCaloricDishesName = new ArrayList<>();
        for(Dish dish: lowCaloricDishes) {
            lowCaloricDishesName.add(dish.getName()); 
        }

        return lowCaloricDishesName;
    }

    // After (Java 8)
    public List<String> getLowCaloricDishesNameNew() {
        List<String> lowCaloricDishesName = menu.stream()
                .filter(dish -> dish.getCalories() < 400) // Selects dishes that are below 400cal
                .sorted(comparing(Dish::getCalories)) // Sorts them by cal
                .map(Dish::getName) // Extract the names of these dishes
                .collect(toList()); // Stores all the names in a List

        return lowCaloricDishesName;
    }

}
```

스트림이라는 새로운 접근법은 소프트웨어 공학의 관점에서 다음과 같은 이점이 있다:
- 코드는 *선언형(declarative way)* 으로 작성되었다. *어떻게*(loop와 같은 제어-흐름 블록이나 if 조건 사용) 가 아닌 *무엇을*(*low* 칼로리로 음식 메뉴를 *필터*) 명시하였다. 이러한 접근법은 변경 요구사항에 대응하기 쉽게 해준다. 즉, 기존 코드를 복붙하지 않고 높은 칼로리를 필터링 하는 코드를 람다 표현식으로 쉽게 만들어낼 수 있다.

- 코드의 가독성과 의도를 분명히 하면서도, 여러 빌딩 블록 연산을 연결하여 복잡한 데이터 처리 파이프라인을 표현할 수 있다. 위 코드 예제는 아래 그림처럼 *filter*를 *sorted*, *map*, *collect* 연산으로 연결한다.
<img src="https://github.com/dulrook/dulrook.github.io/blob/master/assets/images/chaining%20stream.PNG?raw=true">

`filter`(or `sorted`, `map`, `collect`)와 같은 연산들은 *high-level building blocks*으로써 사용 가능하기 때문에 특정한 스레딩 모델에 의존적이지 않다. 이 연산들의 내부 구현은 단일 스레드에서도 사용할 수 있고 혹은 잠재적으로 *투명하게* 멀티코어 아키텍처를 최대로 사용할 수 있다. 이 말은 즉슨, 어떻게 특정한 데이터 처리 task를 병렬화하기 위해 쓰레드나 락에 대해 더이상 고민할 필요가 없다는 뜻이다. 스트림 API가 처리해낼테니 말이다.

요약하면, 자바8의 스트림 API는 개발자가 코드를 작성할 때 아래와 같은 이점을 준다:
- Declarative - 보다 간결하고 가독성이 좋다.
- Composable - 유연성을 향상시킨다.
- Parallelizable - 성능을 향상시킨다.

## 스트림 시작하기

스트림의 간략한 정의는 다음과 같다: "a sequence of elements from a source that supports data-processing operations."
- *Sequence of elements* - 컬렉션처럼 스트림은 특정한 요소 타입으로 구성된 값들의 연속된 집합의 인터페이스를 제공한다. 컬렉션은 자료구조이기 때문에 주로 특정한 시간 및 공간 복잡성과 함께 저장과 접근에 대해 다룬다(예를 들어, `ArrayList` vs `LinkedList`). 반면에 스트림은 `fliter`, `sorted`, `map`과 같은 계산에 대해 표현하는 것을 다룬다. 즉, 컬렉션은 데이터에 대한 것이고 스트림은 계산에 대한 것이다.
- *Source* - 스트림은 컬렉션, 배열, I/O 자원과 같은 제공된 데이터 소스(source)를 사용한다. 정렬된 컬렉션으로부터 생성된 스트림은 여전히 정렬된 상태일 것 이다. 리스트로부터 생성된 스트림의 요소 역시도 원래의 리스트와 같은 순서일 것 이다.
- *Data-processing oprations* - 스트림은 데이터베이스와 같은 연산을 지원하고 또한 함수형 프로그래밍 언어에서의 `filter`, `map`, `reduce`, `find`, `match`, `sort`와 같은 데이터 조작을 위한 일반적인 연산을 지원한한다. 그리고 스트림 연산은 순차적으로 실행할 수 도 있고, 병렬적으로 실행할 수도 있다.

또한, 스트림 연산은 두 가지 중요한 특성이 있다:
- *Pipelining* - 대부분의 스트림 연산은 스트림 자신을 반환하여, 연산을 더 큰 파이프라인으로 구성하기 위해 서로 연결될 수 있도록 한다.
- *Internal iteration* - iterator를 명시적으로 사용하여 반복되는 컬렉션과는 대조적으로, 스트림은 안보이는 곳에서 반복 연산을 수행한다.

```java
public List<String> getthreeHighCaloricDishNames(){
        List<String> threeHighCaloricDishNames =
                menu.stream()
                    .filter(dish -> dish.getCalories() > 300) // Creates a pipeline of operations:first filter high-calorie dishes
                    .map(Dish::getName) // Gets the names of the dishes
                    .limit(3) // Selects only the first three
                    .collect(toList()); // Stores the results in another List
        return threeHighCaloricDishNames;
    }
```
이 예제에서, 먼저 `stream` 메서드를 `menu`에 호출하여 요리의 리스트로부터 스트림을 얻는다. *data source*는 요리의 리스트가 되는 것이고, 이 리스트는 스트림에게 *a sequence of elements*를 제공한다. 다음으로, 스트림에 일련의 `data-processing operations`들을 적용했다: `filter`, `map`, `limit`, `collect`. `collect`를 제외하고 이 모든 연산들은 또 하나의 스트림을 리턴하므로 *pipeline* 형태로 연결될 수 있는 것이다. 마지막으로, `collect` 연산은 파이프라인을 결과로 리턴되는 처리 과정을 수행한다. `collect`가 호출되기 전까지는 아무런 결과도 생성되지 않은것이고 실제로 `menu`로부터 어떤 요소도 선택되지 않았다. `collect`가 호출되기 전까지는 체인 내에 메서드 호출들이 큐에 쌓여있다고 생각하면 된다. 

## 스트림 vs 컬렉션
자바의 기존 개념인 콜렉션과 새로운 개념인 스트림은 모두 자료 구조 인터페이스를 제공하며, 이 인터페이스는 요소 타입의 연속된 값의 집합을 나타낸다. *연속됨(Sequenced)*에 의해, 값에 접근할 때 무작위로 접근하는 것이 아닌 순차적으로 접근하게 된다. 
- 스트림과 컬렉션의 차이
    * *언제* 값을 계산하느냐가 두 개념의 가장 큰 차이이다. 
    * 컬렉션은 모든 값들을 계산하기전에 메모리에 저장하는 자료구조이다. 즉, 무언가를 컬렉션에 더하거나 제외시키려면 그 순간에 모든 요소들이 메모리에 저장되어 있어야한다.
    * 스트림은 개념적으로 고정된 자료구조로써 요소들은 *요청에 따라 계산(computed on demand)* 된다.
    
### 단 한번만 탐색할 수 있다
iterator와 유사하게 스트림은 단 한번만 탐색할수 있다. 탐색이 이루어지고나면 스트림은 소비되었다고 말한다. 스트림을 다시 한번 탐색하려면 처음의 데이터 소스로부터 다시 스트림을 만들어야하는데, 컬렉션과 같이 반복 가능한 소스여야 한다. I/O 채널의 경우는 다시 스트림을 만들 수 없다.

### 외부 vs. 내부 반복(External vs. internal iteration)
컬렉션 인터페이스를 사용하려면 사용자가 직접 반복을 수행해야한다(예를 들어, `for-each`). 이러한 방법의 반복을 *외부 반복*이라한다. 반대로, 스트림 라이브러리는 내부 반복을 사용한다. 내부 반복은 사용자를 위해 반복을 수행하고 어딘가에 결과 스트림 값을 저장해놓는다. 

```java
// Collections: external iteration with a for-each loop
List<String> names = new ArrayList<>();
for(Dish dish: menu) { // Explicitly iterates the list of menu sequentially
    names.add(dish.getName()); // Extracts the name and adds it to an accumulator
}

// Collections: external iteration using an itrator behind the scenes
List<String> names = new ArrayList<>();
Iterator<String> iterator = menu.iterator();
while(iterator.hasNext()) { // Iterates explicitly
    Dish dish = iterator.next();
    names.add(dish.getName());
}

// Streams: internal iteration
List<String> names = menu.stream()
                        .map(Dish::getName) // Parameterizes map with the getName method to extract the name of a dish
                        .collect(toList()); // Starts executing the pipeline of operations; no iteration
```

내부 반복을 사용하게 되면, 항목에 대한 처리는 병렬적으로 투명하게 처리되거나 다른 최적화된 순서로 처리될 수 있다. 이러한 최적화를 컬렉션에서 외부적으로 처리하는것은 어려운일이다. 스트림 라이브러리에 내부 반복은 자동으로 데이터 표현과 하드웨어에 따른 병렬성 구현을 선택한다. 이와 대조적으로, `for-each`를 작성하여 외부 반복을 선택하는 순간, 병렬성에 대해 스스로 관리하고 구현해야하는 힘든 나날이 시작된다. 

## 스트림 연산
스트림 인터페이스는 `java.util.stream.Stream`에 다양한 연산을 정의하고 있다. 스트림 연산은 두가지로 분류할 수 있다. 다른 스트림과 연결할 수 있는 *중간 연산(intermediate operations)* 과, 스트림을 닫는 *최종 연산(terminal operations)* 이 있다. 
- `filter`, `map`, `limit`은 서로 연결되어 파이프라인을 구성한다.
- `collect`는 파이프라인을 실행되고 닫는다.
### 중간 연산
`filter`나 `sorted`와 같은 중간 연산은 리턴 타입으로써 다른 스트림을 반환한다. 따라서 연산들은 연결되어 하나의 쿼리를 구성한다. 중간 연산의 중요한 점은 스트림 파이프라인에서 최종 연산이 호출되기 전까지는 어떠한 연산도 수행되지 않는 다는 점이다. 이를 게으르다(lazy)고 표현한다. 이러한 이유는 최종 연산에 의해 중간 연산들이 병합되고 한번에 처리될 수 있기 때문이다.
```java
List<String> names = menu.stream()
                            .filter(dish -> {
                                                System.out.println("filtering:" + dish.getName());
                                                return dish.getCalories() > 300;
                                            })
                            .map(dish -> {
                                            System.out.println("mapping:" + dish.getName());
                                            return dish.getName();
                                        })
                            .limit(3)
                            .collect(toList());
System.out.println(names);
/*
filtering:pork
mapping:pork
filtering:beef
mapping:beef
filtering:chicken
mapping:chicken
[pork, beef, chicken]
*/
```
위 예제처럼, 스트림 라이브러리가 스트림의 게으른 특성을 이용하여 여러가지 최적화를 수행하는 것을 알 수 있다. 첫째로, 300 칼로리가 넘는 요리가 많음에도 불구하고 단 3개만 선택되었다. 이는 `limit` 연산과 *short-circuiting* 이라 불리는 기법 덕분이다. 두번째로, `filter`와 `map`은 두 개의 분리된 연산임에도, 병합되어 하나의 과정으로 처리되었다(컴파일러 전문가들은 이러한 기법을 *loop fusion* 이라고 부른다). 

### 최종 연산
최종 연산은 스트림 파이프라인으로부로 결과를 생성한다. 결과는 스트림 값이 아닌 `List`나 `Integer`같은 것이고, 심지어 `void`도 있다. 