---
layout: splash
title:  "[모던자바인액션] 람다 표현식"
date:   2019-09-24 01:12:00 +0900
categories: 자바
---

### 람다 표현식
#### 람다에 대한 요약
*Lambda expression* 이란, 메서드로 전달할 수 있는 익명함수를 간결히 표현한 것이다. 
- Anonymous: 메서드처럼 명시적인 이름이 없기 때문에 익명성이 있다. 
- Funtion: 메서드처럼 특정한 클래스와 연관되지않지만 람다는 메서드처럼 파라미터 리스트, 바디, 리턴타입, 발생할 수 있는 예외 리스트들을 갖고 있다.
- Passed around: 람다 표현식은 메서드의 인자로 전달되거나 변수로써 저장될 수 있다.
- Concise: 익명 클래스처럼 불필요한 코드를 작성할 필요 없다.

```java
// Before
Comparator<Apple> byWeight = new Comparator<Apple>() {
    public int compare(Apple a1, Apple a2) {
        return a1.getWeight().compareTo(a2.getWeight());
    }
};

// After (with lambda expressions)              Arrow
Comparator<Apple> byWeight = (Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight());
//                           <--Lambda parameters--> <--------------Lambda body-------------->
```

- *expression-style* lambda: (parameters) -> expression
- *block-style* lambda: (paramters) -> { statements; }

> An **expression** is a construct made up of variables, operators, and method invocations, which are constructed according to the syntax of the language, that evaluates to a single value.

> **Statements** are roughly equivalent to sentences in natural languages. A statement forms a complete unit of execution. 

<br/>
#### 람다를 어디에 어떻게 사용할지

##### 함수형 인터페이스
함수형 인터페이스는 정확히 하나의 추상 메서드를 갖는 인터페이스이기 때문에 람다 표현식을 통해 함수형 인터페이스의 추상 메소드를 직접적으로 인라인으로 구현할 수 있다. 

##### 함수 디스크립터
함수형 인터페이스에 정의된 추상 메서드의 시그니처는 람다 표현식의 시그니처를 나타낸다. 그리고 이 추상 메서드를 *function descrptior* 라고 한다. 
- () -> void 는 빈 파라미터를 인자로 받아 void를 리턴하는 함수를 나타낸다. 그리고 이 표기법은 정확히 `Runnable` 인터페이스를 나타낸다.  
```java
public interface Runnable { void run(); }
```
- 아래의 statement가 정상적인 람다 표현식인 이유는 자바 스펙에서 단일 void 메서드를 호출하는 경우 중괄호로 감쌀 필요 없다고 정의하고 있기 때문이다.
```java
process(() -> System.out.println("This is awesome!));
```

#### 람다 실제로 사용해보기: the execute-around pattern
아래 그림과 같은 형식의 코드를 *execute-around* 패턴이라고 한다. 가령, 파일이나 데이터베이스를 처리할 때 자원을 열고, 어떤 작업을 하고나서, 자원을 닫는등의 과정이 이에 해당한다.
<img src="https://github.com/dulrook/dulrook.github.io/blob/master/assets/images/execute-around%20pattern.PNG?raw=true">

```java
public String processFile() throws IOException {
    /// try ( ~ ) 라인이 파일로부터 한 라인을 읽는 기능을 수행하는 boilerplate 코드이다.
    try (BufferedReader br = new BufferedReader(new FileReader("data.txt"))) {
        return br.readLine();
    }
}
```

- **단계 1: 동작 파라미터를 기억하라**
    현재 코드는 파일로부터 오로지 첫 행만을 읽는다는 제한점이 있다. 두 개의 라인이나 혹은 자주 사용되는 단어등을 리턴하고 싶을땐 어떻게 해야하는가? 이상적으로는 setup과 cleanup을 수행하는 코드를 재사용하고 `processFile()` 에게 파일에 다른 기능을 수행하는 메서드를 알려줄 것 이다. 즉, `processFile`의 동작을 파라미터화하는 것이다.
    동작을 전달하는데에는 정확히 람다가 사용된다. 예를 들어, `BufferedReader`의 두 개 행을 출력하려면:
    ```java
    String result = processFile((BufferedReader br) -> br.readLine() + br.readLine());
    ```
- **단계 2: 동작 전달을 위해 함수형 인터페이스 사용**
    `BufferedReader -> String` 시그니처와 일치하는 람다를 만들어야하고, `IOException` 예외를 던질 수 있도록 해야한다. 다음의 인터페이스를 `BufferedReaderProcessor` 라고 정의하자:
    ```java
    @FunctionalInterface
    public interface BufferedReaderProcessor {
        String process(BufferedReader b) throws IOException;
    }
    ```
    이제 이 인터페이스를 새로운 `processFile` 메서드의 인자로 사용할 수 있다:
    ```java
    public String processFile(BufferedReaderProcessor p) throws IOException {
        ...
    }
    ```

- **단계 3: 동작 실행**
    `BufferedReader -> String` 형태를 만족하는 어떠한 람다던지 메서드의 인자로 사용될 수 있다. 이제 `processFile`의 바디 내부에서 람다로 표시되는 코드를 실행하는 방법만 있으면 된다.
    ```java
    public Stirng processFile(BufferedReaderProcessor p) throws IOException {
        try (BufferedReader br = new BufferedReader(new FileReader("data.txt"))) {
            return p.process(br);
        }
    }
    ```

- **단계 4: 람다 전달**
    이제 여러가지 람다를 이용해 `processFile` 메서드를 재사용하고 다양한 방식으로 파일을 처리할 수 있다.
    ```java
    String oneLine = processFile((BufferedReader br) -> br.readLine());
    String twoLines = processFile((BufferedReader br) ->  br.readLine() + br.readLine());
    ```

#### 함수형 인터페이스 사용
함수형 인터페이스가 유용한 이유는 추상 메서드의 시그니처가 람다 표현식의 시그니처를 나타낸다는 점이다. 추상 메서드의 시그니처를 *function descriptor*라고 한다. 다양한 람다 표현식을 사용하기 위해서는 공통의 함수 디스크립터를 표현할 수 있는 함수형 인터페이스들의 집합이 필요하다. 
자바 API는 `Comparable`, `Runnable`, `Callable` 등의 다양한 함수 API를 포함하고 있다. 자바8 라이브러리 설계자들은 개발자들을 위해 `java.util.function` 패키지내에 여러가지 새로운 함수형 인터페이스를 제공하고 있다.

- Predicate
    ```java
    // java.util.function.Predicate
    /**
    * Represents a predicate (boolean-valued function) of one argument.
    *
    * <p>This is a <a href="package-summary.html">functional interface</a>
    * whose functional method is {@link #test(Object)}.
    *
    * @param <T> the type of the input to the predicate
    *
    * @since 1.8
    */
    @FunctionalInterface
    public interface Predicate<T> {

        /**
        * Evaluates this predicate on the given argument.
        *
        * @param t the input argument
        * @return {@code true} if the input argument matches the predicate,
        * otherwise {@code false}
        */
        boolean test(T t);

        ...
    }

    // Example
    public <T> List<T> filter(List<T> list, Predicate<T> p) {
        List<T> results = new  ArrayList<>();
        for(T t : list) {
            if(p.test(t)) {
                results.add(t);
            }
        }
        return results;
    }
    
    Predicate<String> nonEmptyStringPredicate = (String s) -> !s.isEmpty();
    List<String> nonEmpty = filter(listOfStrings, nonEmptyStringPredicate);
    ```
- IntPredicate
    자바 타입에는 reference type (예를 들어, `Byte`, `Integer`, `Object`, `List`)과 primitive type (예를 들어, int, double, byte, char)이 있다. 그런데 제네릭 파라미터는 내부 구현상 referece 타입만 사용할 수 있다. 그래서 자바에서는, primitive type을 상응하는 reference type으로 변환하는 매커니즘이 있고, 이를 *boxing* 이라고 한다. 반대의 경우는 *unboxing* 이라고 한다. 물론 자바에는 *autoboxing* 이라는 편리한 매커니즘이 있다. 그러나 이 매커니즘은 퍼포먼스 비용을 수반하게 된다. 
    자바 8에서는 이와 같이 박싱과 언박싱으로 인한 메모리 낭비를 피하기 위해 특화된 버젼의 함수형 인터페이스를 제공한다. 
    ```java
    // java.util.function.IntPredicate

    /**
    * Represents a predicate (boolean-valued function) of one {@code int}-valued
    * argument. This is the {@code int}-consuming primitive type specialization of
    * {@link Predicate}.
    *
    * <p>This is a <a href="package-summary.html">functional interface</a>
    * whose functional method is {@link #test(int)}.
    *
    * @see Predicate
    * @since 1.8
    */
    @FunctionalInterface
    public interface IntPredicate {

        /**
        * Evaluates this predicate on the given argument.
        *
        * @param value the input argument
        * @return {@code true} if the input argument matches the predicate,
        * otherwise {@code false}
        */
        boolean test(int value);
    ```

    > **예외, 람다, 함수형 인터페이스의 관계**
    >
    > 함수형 인터페이스에서는 체크 예외를 던질 수 없다. 람다 표현식의 바디 내에서 예외를 던지려면, 두 가지 옵션이 있다. 체크 예외를 선언하는 함수형 인터페이스를 직접 정의하거나 람다 바디를 `try/catch` 블록으로 감싸야 한다.
    >
    > > 체크 예외(Checked Exception)는 `RuntimeException`을 상속하지 않는 것들로 복구가 가능한 예외들이 해당된다. (ex: `IOException`, `SQLException`)
    > > 언체크 예외(Unchecked Exception)는 `RuntimeExceptino`을 상속하는 예외로, 명시적으로 예외처리를 강제하지 않는다. 대표적으로 `NullPointerException` 이 해당된다.
    >
    > 예를 들어, 3.3 절에서 소개한 함수형 인터페이스 `BufferedReaderProcessor`는 명시적으로 `IOException`을 선언한다:
    > ```java
    > @FunctionalInterface
    > public interface BufferedReaderProcessor {
    >   String process(BufferedReader b) throws IOException;
    > }
    > ```
    > 그러나 보통은 `Function<T, R>`과 같은 함수형 인터페이스를 기대하는 API를 사용하기 때문에 직접 함수형 인터페이스를 정의하기는 힘들다. 이런 경우에는 체크 예외를 명시적으로 잡아줘야한다:
    > ```java
    > Function<BufferedReader, String> f =
    >   (BufferedReader b) -> {
    >       try { return b.readLine(); } catch(IOExceptiopn e) { throw new RuntimeException(e); } 
    > };
    > ```

#### 메서드 참조
메서드 참조를 이용하면 기존의 메서드 정의를 재사용할 수 있고 람다 처럼 전달할 수 있다. 때로는 람다 표현식을 사용하는 것보다 메서드 참조를 사용하는 것이 가독성 측면에서 좋을 때가 있다. 
```java
// Before:
inventory.sort((Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight()));
// After (using a method reference and java.util.Compartor.comparing):
inventory.sort(comparing(Apple::getWeight));
```

##### 간단히 얘기하자면
메서드 참조는 람다가 오직 특정한 메서드만을 호출하는 줄임말로 볼 수 있다. 기본 아이디어는 람다가 "이 메서드를 직접적으로 호출해라"를 표현한다면, 어떻게 호출하는지 설명하는지를 참조하기 보다는 메서드 이름으로 참조하는 것이 가장 좋은 방법이다. 실제로, 메서드 참조는 기존의 메서드 구현으로부터 람다 표현식을 생성할 수 있도록한다. 명시적으로 메서드 이름을 참조함으로써 코드의 가독성을 높일 수 있는것이다.
<img src="https://github.com/dulrook/dulrook.github.io/blob/master/assets/images/lamdas%20and%20method%20reference.PNG?raw=true">

#### 생성자 참조
`ClassName::new` 처럼 이름과 키워드`new`를 사용하여 기존의 생성자를 참조할 수 있다. 예를 들어 인수가 없는 생성자, 즉 `Supplier`의 `() -> Apple` 같은 시그니처를 갖는 생성자가 있다고 가정한다면,
```java
Supplier<Apple> c1 = Apple::new;
Apple a1 = c1.get();

// which is equivalent to

Supplier<Apple> c1 = () -> new Apple();
Apple a1 = c1.get();
```

Apple(Integer weight)라는 시그니처를 갖는 생성자는 `Function` 인터페이스의 시그니처와 같다.
```java
Function<Integer, Apple> c2 = Apple::new;
Apple a2 = c2.apply(110);

// which is equivalent to

Function<Integer, Apple> c2 = (weight) -> new Apple(weight);
Apple a2 = c2.apply(110);
```
    
#### 람다 표현식 합성을 위한 유용한 메서드들
자바 8 API 내에 여러 함수형 인터페이스는 편리한 메서드들을 포함하고 있다. 예를 들어, `Comparator`, `Function`, `Predicate`등과 같이 많은 함수형 인터페이스는 람다 표현식을 합성할 수 있는 메서드를 제공한다. 즉, 여러개의 단순한 람다 표현식을 합쳐서 복잡한 표현식을 만들 수 있다.
##### Composing Comparators
```java
Comparator<Apple> c = comparator.comparing(Apple::getWeight);

// Reversed Order
inventory.sort(comparing(Apple::getWeight).reversed());

// Chaing Comparators
inventory.sort(comparing(Apple::getWeight))
        .reversed()
        .thenComparing(Apple::getCountry));
```
##### Composing Predicates
`Predicate` 인터페이스에는 기존의 `Predicate`를 좀 더 복잡하게 재사용할 수 있도록하는 세가지 메서드를 포함한다: `negate`, `and`, `or`.
```java
// Produces the negation of the exsting Predicate object redApple
Predicate<Apple> notRedApple = redApple.negate();

// Chains two predicates to produce another Predicate object
Predicate<Apple> redAndHeavyApple = redApple.and(apple -> apple.getWeight() > 150);
```

##### Composing Functions
`Function` 인터페이스에 의해 표현되는 람다 표현식 역시 합성할 수 있다. `Function` 인터페이스는 `andThen`과 `compose`라는 `Function`의 인스턴스를 리턴하는 디폴트 메서드를 포함한다.

```java
Function<Integer, Integer> f = x -> x + 1;
Function<Integer, Integer> g = x -> x * 2;
Function<Integer, Integer> h = f.andThen(g); // g(f(x))
int result = h.apply(1); // This returns 4.

Function<Integer, Integer> f = x -> x + 1;
Function<Integer, Integer> g = x -> x * 2;
Function<Integer, Integer> h = f.compose(g); //f(g(x))
int result = h.apply(1); // This returns 3.
```