---
layout: splash
title:  "[이펙티브자바] 9장 일반적인 프로그래밍"
date:   2020-03-17 00:30:00 +0900
categories: 자바
---

## Item 57: Minimize the scope of local variables
- 지역변수의 스코프를 최소화하여 코드 가독성과 유지보수성을 높이고 오류 가능성을 낮춘다.
    - 변수가 처음쓰일 때 선언하는 것이 가장 효과적인 스코프 최소화의 방법
- 거의 모든 지역 변수의 선언은 초기화를 포함해야한다.
    - 초기화에 필요한 정보가 충분해질 때 선언해야함 (`try-catch` 문은 예외 )

## Item 58: Prefer for-each loops to traditional for loops
- `for-each` (**enhanced `for` statement**) 은 전통적인 `for` 문이 갖는 문제점을 해결해준다.
    - 전통적인 `for`문에서 인덱스 변수는 코드를 지저분하게하며, 실질적으로 필요한 변수가 아님
    - 반복자가 코드에 여러번 등장하면서 실수할 여지가 생김

```java
// The preferred idiom for iterating over collections and arrays
for (Element e : elements) {
    ... // Do something with e
}
```

- for-each 문을 사용할 수 없는 상황
    1. Destructive filtering: 컬렉션을 순회하면서 선택된 원소를 지워야 할 경우, 명시적인 반복자를 사용하여 `remove` 메서드를 호출한다.
    2. Transforming: 리스트나 배열은 순회하면서 특정 원소의 값을 교체해야될 때 리스트 반복자나 배열 인덱스가 필요하다.
    3. Parallel iteration: 여러 컬렉션을 병렬로 순회해야될 때 명시적으로 반복자나 인덱스 변수를 제어해야한다.

- 가능한 모든 곳에서 `for`문이 아닌 `for-each` 문을 사용하자.

## Item 59: Know and use the libraries

## Item 60: Avoid float and double if exact answers are required

## Item 61: Prefer primitive types to boxed primitives

## Item 62: Avoid strings where other types are more appropriate

## Item 63: Beware the performance of string concatenation

## Item 64: Refer to objects by their interfaces

## Item 65: Prefer interfaces to reflection

## Item 66: Use native methods judiciously

## Item 67: Optimize judiciously

## Item 68: Adhere to generally accepted naming conventions