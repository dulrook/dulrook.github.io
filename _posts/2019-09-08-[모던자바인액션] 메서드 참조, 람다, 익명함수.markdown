---
layout: splash
title:  "[모던자바인액션] 메서드 참조, 람다, 익명함수"
date:   2019-09-08 00:07:00 +0900
categories: 자바
---

## Functions in Java
### 메서드 참조(Method reference)
디렉토리에서 숨겨진 파일들을 필터링 하는 프로그램을 만든다고 했을 때, 기존 방식(자바8 이전)으로는 다음과 같이 구현할 수 있다.

```java
File[] hiddenFiles = new File(".").listFiles(new FileFilter() {
      @Override
      public boolean accept(File pathname) {
            return pathname.isHidden();
      }
});
```


위의 코드를 이해하기 위해 *java.io.File* 과 *java.io.FileFilter*에 대한 문서를 참조해보면 아래와 같다.
> *Constructors*  
>
> **File(String pathname)**  
> Creates a new File instance by converting the given pathname string into an abstract pathname.


> *Methods*
>
> | Modifier and Type | Method and Description |
> | ------------ | ----------- |
> | File[] | `listFiles`( ) <br> Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. |
> | File[] | `listFiles`(`FileFilter` filter) <br> Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. |
> | File[] | `listFiles`(`FilenameFilter` filter) <br> Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. |
> | boolean | `isHidden`( ) <br> Tests whether the file named by this abstract pathname is a hidden file. |

File 클래스에는 File의 배열형태로 리턴하는 `listFiles`( ) 메서드로 3가지의 다형성이 존재한다. 아무런 인자를 받지 않고 디렉토리에 존재하는 파일들을 배열로 담아 리턴하거나, `FileFilter` 또는 `FilenameFilter` 를 인자로 받아 조건에 따라 필터링된 파일들만을 배열로 담아 리턴한다. 이 중에서 `FileFilter`는 Java.io 패키지에서 아래와 같이 구현되어있다. 

```java
/**
 * A filter for abstract pathnames.
 *
 * <p> Instances of this interface may be passed to the <code>{@link
 * File#listFiles(java.io.FileFilter) listFiles(FileFilter)}</code> method
 * of the <code>{@link java.io.File}</code> class.
 *
 * @since 1.2
 */
@FunctionalInterface
public interface FileFilter {

    /**
     * Tests whether or not the specified abstract pathname should be
     * included in a pathname list.
     *
     * @param  pathname  The abstract pathname to be tested
     * @return  <code>true</code> if and only if <code>pathname</code>
     *          should be included
     */
    boolean accept(File pathname);
}
```

먼저 `@FunctionalInterface`는 람다를 쓰기 위해 자바8 부터 도입된 애노테이션이다. 모든 함수형 인터페이스 *(하나의 추상 메서드만(SAM, Single Abstract Method)을 갖는 인터페이스로 보통 람다 표현식으로 다뤄진다)* 에는 이 애노테이션을 사용할 것을 권장한다. 해당 인터페이스의 목적을 명확하게 명시함으로써 커뮤니케이션을 분명하게 할 수 있고, 이 애노테이션이 붙은 인터페이스에 추상 메서드가 2개 이상 선언되어있으면 컴파일러가 에러를 생성할 수 있도록 하는 장점이 있기 때문이다. 

> *람다에 대해 ..*  
> 람다는 익명 함수로써 일급 시민으로 취급된다, 즉, 메서드에 전달되거나 메서드로부터 리턴될 수 있다.   
> 자바8 이전에는 하나의 기능 조각에 대해 캡슐화가 필요할 때 마다 매번  클래스를 생성했어야 했다. 그래서 불필요한 코드들이 많이 생겨나는 문제점이 있었다. 

어쨌든 람다에 대한 이야기는 잠시 뒤로 미뤄놓고, 위에 작성된 숨겨진 파일들을 찾아내는 소스 코드를 살펴보면 이 `FileFilter` 라는 인터페이스를 인자로 받는 `listFiles`() 메서드를 사용하고 있고, `FileFilter`의 `accept`()를 `isHidden`() 라는 조건을 사용하여 구현하고 있는 형태가 된다. 

그리고 이제 위의 소스코드는 자바8에서 아래와 같이 표현할 수 있게된다.

```java
File[] hiddenFiles = new File(".").listFiles(File::isHidden);
```
기존에 자바에서 new로 객체 참조를 생성하여 객체를 주고 받았던것과같이 자바8 에서는 메서드 참조를 만들어 전달하는 것이다. 다시 말해 자바8의 **메서드 참조**는 **::** 라는 기호를 사용하여 `File` 클래스의 `isHidden`() 메서드를 참조할 수 있게한다. 따라서 위 경우에서 `FileFilter` 함수형 인터페이스의 메서드 리턴 타입과 `isHidden`()의 리턴 타입이 boolean으로 동일하므로 코드 자체를 전달되는것 이다. 

### 코드 넘겨주기 예제

```java
import java.util.ArrayList;
import java.util.List;

public class Main {

    static class Stock {
        String name;
        int price;
        String type;

        Stock(String name, int price, String type) {
            this.name = name;
            this.price = price;
            this.type = type;
        }
        String getName() {
            return name;
        }
        int getPrice() {
            return price;
        }
        String getType() {
            return type;
        }
    }

    /////////////////////////////////////////////////////////////////////////// Old style --->
    public static List<Stock> filterKospiStock(List<Stock> stockList) {
        List<Stock> filteredStockList = new ArrayList<>();
        for (Stock stock : stockList) {
            if("KOSPI".equals(stock.getType())) {
                filteredStockList.add(stock);
            }
        }
        return filteredStockList;
    }

    static List<Stock> filterExpensiveStock(List<Stock> stockList) {
        List<Stock> filteredStockList = new ArrayList<>();
        for (Stock stock : stockList) {
            if(stock.getPrice() >= 1_000_000) {
                filteredStockList.add(stock);
            }
        }
        return filteredStockList;
    }
    /////////////////////////////////////////////////////////////////////////// Old style <---


    /////////////////////////////////////////////////////////////////////////// Modern style --->
    interface Predicate<T> {
        boolean test(T t);
    }

    static boolean isKospi(Stock stock) {
        return "KOSPI".equals(stock.getType());
    }

    static boolean isExpensive(Stock stock) {
        return stock.getPrice() >= 1_000_000;
    }

    static List<Stock> filterStock(List<Stock> stockList, Predicate<Stock> p) {
        List<Stock> filteredStockList = new ArrayList<>();
        for (Stock stock : stockList) {
            if(p.test(stock)) {
                filteredStockList.add(stock);
            }
        }
        return filteredStockList;
    }
    /////////////////////////////////////////////////////////////////////////// Modern style <---

    public static void main(String[] args) {
        List<Stock> stockList = new ArrayList<>();
        stockList.add(new Stock("A", 500000, "KOSPI"));
        stockList.add(new Stock("B", 50000, "KOSDAQ"));
        stockList.add(new Stock("C", 1000000, "KOSDAQ"));
        stockList.add(new Stock("D", 2000000, "KOSPI"));

        System.out.println(filterKospiStock(stockList).containsAll(filterStock(stockList, Main::isKospi))); // True
        System.out.println(filterExpensiveStock(stockList).containsAll(filterStock(stockList, Main::isExpensive))); // True
    }
}



```

### 메서드 전달에서 람다로

메서드를 값으로 전달함으로써 중복되는 코드 구현을 줄일수어 유용하지만, 한 두번만 사용되는 isKospi 나 isExpensive와 같은 짧은 메서드를 일일히 정의하는 것은 귀찮은 일이된다. 그래서 익명 함수 또는 람다라는 새로운 개념을 이용하면 단순히 아래처럼 코드를 작성할 수 있다.

```java
filterStock(stockList, (Stock s) -> "KOSPI".equals(s.getType()));
filterStock(stockList, (Stock s) -> s.getPrice() >= 1_000_000);

// Also even
filterStock(stockList, (Stock s) -> "KOSPI".equals(s.getType()) || s.getPrice() >= 1_000_000);
```

위와 같이 짧은 코드로 작성될 메서드는 일일히 정의하여, 어디에 구현되어있는지 굳이 찾을필요 없이 간편하게 익명 람다를 사용하는것이 유용하다. 하지만 메서드의 길이가 다소 길어진다면 어떤 기능을 하는지 명확한 이름을 가진 메서드로 정의하는것이 바람직하다.
